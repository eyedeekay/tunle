*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
# Create the ICMPV6-CHECK chain and its log chain
# These chains are used later to prevent a type of bug that would
# allow malicious traffic to reach over the server into the private network
# An instance of such a bug on Cisco software is described here:
# https://www.insinuator.net/2016/05/cve-2016-1409-ipv6-ndp-dos-vulnerability-in-cisco-software/
# other software implementations might be at least as broken as the one in CISCO gear.
:ICMPV6-CHECK - [0:0]
:ICMPV6-CHECK-LOG - [0:0]

# Allow related/established traffic
-A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
# Allow traffic on local loopback
-A INPUT -i lo -j ACCEPT
# Allow connections to Tor Proxy
-A INPUT -p tcp --dport 4447 -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 4447 -m state --state NEW -j ACCEPT
# Log dropped packets
-A INPUT -j LOG --log-prefix "Dropped INPUT packet: " --log-level 7 --log-uid

-A FORWARD -j ICMPV6-CHECK
# Use the ICMPV6-CHECK chain, described above
-A ICMPV6-CHECK -p icmpv6 -m hl ! --hl-eq 255 --icmpv6-type router-solicitation -j ICMPV6-CHECK-LOG
-A ICMPV6-CHECK -p icmpv6 -m hl ! --hl-eq 255 --icmpv6-type router-advertisement -j ICMPV6-CHECK-LOG
-A ICMPV6-CHECK -p icmpv6 -m hl ! --hl-eq 255 --icmpv6-type neighbor-solicitation -j ICMPV6-CHECK-LOG
-A ICMPV6-CHECK -p icmpv6 -m hl ! --hl-eq 255 --icmpv6-type neighbor-advertisement -j ICMPV6-CHECK-LOG
-A ICMPV6-CHECK-LOG -j LOG --log-prefix "ICMPV6-CHECK-LOG DROP "
-A ICMPV6-CHECK-LOG -j DROP

# Block invalid traffic
-A OUTPUT -m state --state INVALID -j DROP
# Allow related/established traffic
-A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
# Allow outbound connection for the tor-router user to the Tor directory servers and network
-A OUTPUT -m owner -o eth0 --uid-owner 9001 -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT
# Allow traffic on local loopback
-A OUTPUT -d ::1/128 -o lo -j ACCEPT
# Allow connections to local transparent listener
-A OUTPUT -d ::1/128 -p tcp --syn --dport 4447 -j ACCEPT
# Log all other dropped packets
-A OUTPUT -j LOG --log-prefix "Dropped OUTPUT packet: " --log-level 7 --log-uid

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# Skip pre-routing if interface is WAN or local
-A PREROUTING -i eth0 -j RETURN
-A PREROUTING -i lo -j RETURN
# Redirect all .onion addresses
-A PREROUTING -d fc00::/7 -p tcp --syn -j REDIRECT --to-ports 4447
# Redirect UDP DNS traffic to internal DNS server
-A PREROUTING -p udp --dport 4447 -j REDIRECT --to-ports 4447
-A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 4447
# Skip pre-routing if destination is private or reserved
-A PREROUTING -d fd00::/8,fec0::/10 -j RETURN
# Redirect remaining TCP traffic
-A PREROUTING -p tcp --syn -j REDIRECT --to-ports 4447

# Redirect all .onion addresses
-A OUTPUT -d fc00::/7 -p tcp --syn -j REDIRECT --to-ports 4447
# Redirect all DNS traffic
-A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 4447
# Allow the tor-router to bypass transparent routing
-A OUTPUT -m owner --uid-owner 9001 -j RETURN
# Don't transparently redirect traffic out of the loopback
-A OUTPUT -o lo -j RETURN
# Don't redirect if destination is private or reserved
-A OUTPUT -d fd00::/8,fec0::/10 -j RETURN
# Redirect remaining TCP traffic
-A OUTPUT -p tcp --syn -j REDIRECT --to-ports 4447

COMMIT
